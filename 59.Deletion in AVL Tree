#include<iostream>
using namespace std;

class AVL_Node
{
	public:
	int key;
	AVL_Node *left;
	AVL_Node *right;
	int height;
};

// Function to get the height of the tree
int height(AVL_Node *N)
{
	if (N == NULL)
	return 0;
	return N->height;
}

// Function to get a maximum of two integers
int max(int a, int b)
{
	return (a > b)? a : b;
}

//Function to create a new AVL_Node 
//Adding the newly created node as leaf node
AVL_Node* newAVL_Node(int key)
{
	AVL_Node* node = new AVL_Node();
	node->key = key;
	node->left = NULL;
	node->right = NULL;
	node->height = 1;
	return(node);
}

// Function for right rotation
AVL_Node *rightRotate(AVL_Node *y)
{
	AVL_Node *x = y->left;
	AVL_Node *T2 = x->right;
	// Perform rotation
	x->right = y;
	y->left = T2;
	// Update heights
	y->height = max(height(y->left),height(y->right)) + 1;
	x->height = max(height(x->left),height(x->right)) + 1;
	// Return new root
	return x;
}

// Function for left rotation
AVL_Node *leftRotate(AVL_Node *x)
{
	AVL_Node *y = x->right;
	AVL_Node *T2 = y->left;
	// Perform rotation
	y->left = x;
	x->right = T2;
	// Update heights
	x->height = max(height(x->left),height(x->right)) + 1;
	y->height = max(height(y->left),height(y->right)) + 1;
	// Return new root
	return y;
}

// Function to find the Balance factor of Nodes
int getBalance(AVL_Node *N)
{
	if (N == NULL)
		return 0;
	return height(N->left) - height(N->right);
}

//Function to construct a tree.
AVL_Node* AVL_insert(AVL_Node* AVL_Node, int key)
{
	//Perform the normal BST insertion
	if (AVL_Node == NULL)
		return(newAVL_Node(key));
	if (key < AVL_Node->key)
		AVL_Node->left = AVL_insert(AVL_Node->left, key);
	else if (key > AVL_Node->key)
		AVL_Node->right = AVL_insert(AVL_Node->right, key);
	else 
		return AVL_Node;
	//Update height of ancestor Node
	AVL_Node->height = 1 + max(height(AVL_Node->left),height(AVL_Node->right));
	//Step 1: Find the balance factor of parent
	int balance = getBalance(AVL_Node);
	// If this Node becomes unbalanced, all four cases are:
	// 1. Left Left Case
	if (balance > 1 && key < AVL_Node->left->key)
		return rightRotate(AVL_Node);
	// 2. Right Right Case
	if (balance < -1 && key > AVL_Node->right->key)
		return leftRotate(AVL_Node);
	// 3. Left Right Case
	if (balance > 1 && key > AVL_Node->left->key)
	{
		AVL_Node->left = leftRotate(AVL_Node->left);
		return rightRotate(AVL_Node);
	}
	// 4. Right Left Case
	if (balance < -1 && key < AVL_Node->right->key)
	{
		AVL_Node->right = rightRotate(AVL_Node->right);
		return leftRotate(AVL_Node);
	}
	//Return the (unchanged) Node pointer
	return AVL_Node;
}

//Function to find the AVL_Node with minimum key value
AVL_Node * minValueAVL_Node(AVL_Node* node)
{
	AVL_Node* current = node;
	//Going to the left most side
	while (current->left != NULL)
	current = current->left;
	return current;
}

//Function to delete an AVL_Node with the given key from the subtree 
AVL_Node* AVL_delete(AVL_Node* root, int key)
{
	//Perform normal BST deletion
	if (root == NULL)
		return root;
	//Find the node to be deleted
	//Left Side
	if ( key < root->key )
		root->left = AVL_delete(root->left, key);

	//Right Side
	else if( key > root->key )
		root->right = AVL_delete(root->right, key);
    //Root Node
	else{
		// AVL_Node with only one child or no child
		if( (root->left == NULL) || (root->right == NULL) ){
			AVL_Node *temp = root->left ? root->left : root->right;
			// No child case
		if (temp == NULL){
			temp = root;
			root = NULL;
		}
		else // One child case
			*root = *temp; // Copy the contents of the non-empty child
			free(temp);
		}
		else{

			AVL_Node* temp = minValueAVL_Node(root->right);

			root->key = temp->key;
			// Delete the inorder successor
			root->right = AVL_delete(root->right,temp->key);
		}
	}

	// If the tree had only one AVL_Node then return
	if (root == NULL)
		return root;

	//UPDATE HEIGHT OF THE CURRENT AVL_Node
	root->height = 1 + max(height(root->left),height(root->right));

	//GET THE BALANCE FACTOR OF THIS AVL_Node (to check whether this AVL_Node became unbalanced)
	int balance = getBalance(root);

	// If this AVL_Node becomes unbalanced, then there are 4 cases

	// Left Left Case
	if (balance > 1 &&getBalance(root->left) >= 0)
		return rightRotate(root);

	// Left Right Case
	if (balance > 1 &&getBalance(root->left) < 0){
		root->left = leftRotate(root->left);
		return rightRotate(root);
	}

	// Right Right Case
	if (balance < -1 &&getBalance(root->right) <= 0)
		return leftRotate(root);
	// Right Left Case
	if (balance < -1 &&getBalance(root->right) > 0){
		root->right = rightRotate(root->right);
		return leftRotate(root);
	}

	return root;
}

void PREORDER(AVL_Node *root){
	if(root != NULL){
		cout << root->key << " ";
		PREORDER(root->left);
		PREORDER(root->right);
	}
}

int main(){
	AVL_Node *root = NULL;
	root = AVL_insert(root, 40);
	root = AVL_insert(root, 20);
	root = AVL_insert(root, 10);
	root = AVL_insert(root, 30);
	root = AVL_insert(root, 25);
	root = AVL_insert(root, 60);
	root = AVL_insert(root, 45);
	root = AVL_insert(root, 42);
	root = AVL_insert(root, 52);
	root = AVL_insert(root, 50);
	root = AVL_insert(root, 55);
	root = AVL_insert(root, 75);
	root = AVL_insert(root, 70);
	root = AVL_insert(root, 80);
	root = AVL_insert(root, 85);

	cout << "Preorder traversal of the above AVL tree is:\n"<<endl;
	PREORDER(root);
	//Deleting the node 25
    root = AVL_delete(root, 25);
	cout <<endl<<"Preorder traversal after"<< " deletion of 25:\n"<<endl;
	PREORDER(root);
	return 0;
}
